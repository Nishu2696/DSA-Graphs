Question Links: https://leetcode.com/problems/network-delay-time/

class Solution {
    class Pair {
        int first; // source
        int second; // cost
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> graph = new ArrayList<>();
        // as i starts from 1 hence adding i <= n
        for(int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < times.length; i++) {
            graph.get(times[i][0]).add(new Pair(times[i][1], times[i][2]));
        }

        // graph = [[], [], [[1,1], [3,1]], [4,1], []]

        // as i starts from 1 hence adding n + 1
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k] = 0;

        // dist =[max, 1, 0, 1, 2]

        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{k, 0});

        while(!queue.isEmpty()) {
            int[] cell = queue.poll();
            int source = cell[0]; // 2, 1, 3, 4
            int cost = cell[1]; // 0, 1, 1, 1

            for(Pair vertex: graph.get(source)) {
                int adjVertex = vertex.first; // 1, 3, 4
                int adjCost = vertex.second; // 1, 1, 1

                if (cost + adjCost < dist[adjVertex]) {
                    dist[adjVertex] = cost + adjCost;
                    queue.add(new int[]{adjVertex, cost + adjCost});
                }
            }
        }

        int res = 0;

        // as i starts from 1 hence starting from i = 1, because 0 will always be max value
        for (int i = 1; i <= n; i++) {
            if (dist[i] > res) {
                res = Math.max(dist[i], res);
            }
        }

        return res == Integer.MAX_VALUE ? -1 : res;
    }
}
