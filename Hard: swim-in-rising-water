Question Link: https://leetcode.com/problems/swim-in-rising-water/

class Solution {
    public int swimInWater(int[][] grid) {
        int[][] directions = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][m];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.add(new int[] { 0, 0, grid[0][0] });
        visited[0][0] = true;

        while (!pq.isEmpty()) {
            int[] cell = pq.poll();
            int currRow = cell[0];
            int currCol = cell[1];
            int currVal = cell[2];

            for (int[] dirs : directions) {
                int x = currRow + dirs[0];
                int y = currCol + dirs[1];

                if (x < 0 || x >= m || y < 0 || y >= n) {
                    continue;
                }

                if (!visited[x][y]) {
                    visited[x][y] = true;
                    int time = Math.max(currVal, grid[x][y]);
                    if (x == n - 1 && y == n - 1) {
                        return time;
                    }
                    pq.add(new int[] { x, y, time });
                }
            }
        }

        return 0;
    }
}
