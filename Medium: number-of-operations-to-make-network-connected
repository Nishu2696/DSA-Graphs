Question Link: https://leetcode.com/problems/number-of-operations-to-make-network-connected/

class Solution {
    public int makeConnected(int n, int[][] connections) {
        if (connections.length < n - 1) {
            return -1;
        }

        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge: connections) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        boolean[] visited = new boolean[n];
        Arrays.fill(visited, false);

        int count = 0;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(graph, visited, i);
                count++;
            }
        }

        return count - 1;
    }

    public void dfs(List<List<Integer>> graph, boolean[] visited, int index) {
        visited[index] = true;
        for (Integer edge: graph.get(index)) {
            if (!visited[edge]) {
                dfs(graph, visited, edge);
            }
        }
        return;
    }
}
