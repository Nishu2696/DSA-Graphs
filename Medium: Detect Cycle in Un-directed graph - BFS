Question Link: https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isCycle(adj);
            if (ans)
                System.out.println("1");
            else
                System.out.println("0");

            System.out.println("~");
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int vertices = adj.size();
        boolean[] visited = new boolean[vertices];
        Arrays.fill(visited, false);
        
        for (int i = 0; i < vertices; i++) {
            if (!visited[i]) {
                if (isCycleDetected(adj, i, visited)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public boolean isCycleDetected(ArrayList<ArrayList<Integer>> adj, int index, boolean[] visited) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{index, -1});
        visited[index] = true;
        
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0];
            int y = cell[1];
            
            for (Integer ver: adj.get(x)) {
                if (!visited[ver]) {
                    queue.offer(new int[]{ver, x});
                    visited[ver] = true;
                } else if (ver != y) {
                    return true;
                }
            }
        }
        
        return false;
    }
}
