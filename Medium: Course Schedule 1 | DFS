Question Link: https://leetcode.com/problems/course-schedule/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>(numCourses);
        for (int i = 0; i < numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        for(int[] edge: prerequisites) {
            adjList.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[numCourses];
        boolean[] dp = new boolean[numCourses];

        for(int i = 0; i < numCourses; i++) {
            if(!dfs(adjList, visited, i, dp)) {
                return false;
            }
        }

        return true;
    }

    public boolean dfs(List<List<Integer>> adjList, boolean[] visited, int index, boolean[] dp) {
        if (visited[index]) {
            return dp[index];
        } else {
            visited[index] = true;
        }

        for(int i = 0; i < adjList.get(index).size(); i++) {
            if (!dfs(adjList, visited, adjList.get(index).get(i), dp)) {
                dp[index] = false;
                return false;
            }
        }
        dp[index] = true;
        return true;
    }
}
