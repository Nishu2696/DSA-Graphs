Question Link: https://leetcode.com/problems/course-schedule-ii/

class Solution {
    // numCourses = 4
    // linkedCounts = [0,0,0,0]
    // linkedCounts = [0, 1, 1, 2]
    // adjList = [[1,2], [3], [3], []]
    // order = [0,0,0,0];
    // order = [0]
    // order = [0,1]
    // order = [0,1,2]
    // order = [0,1,2,3]
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] linkedCounts = new int[numCourses];
        List<List<Integer>> adjList = new ArrayList<>(numCourses);
        initializeGraph(linkedCounts, adjList, prerequisites);
        return bfs(linkedCounts, adjList);
    }
    public void initializeGraph(int[] linkedCounts, List<List<Integer>> adjList, int[][] prerequisites) {
        int n = linkedCounts.length;
        while (n > 0) {
            adjList.add(new ArrayList<>());
            n = n - 1;
        }
        for (int[] edge: prerequisites) {
            linkedCounts[edge[0]] = linkedCounts[edge[0]] + 1;
            adjList.get(edge[1]).add(edge[0]);
        }
    }
    public int[] bfs(int[] linkedCounts, List<List<Integer>> adjList) {
        int[] order = new int[linkedCounts.length];
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < linkedCounts.length; i++) {
            if (linkedCounts[i] == 0) {
                queue.offer(i);
            }
        }
        int visited = 0;
        while(!queue.isEmpty()) {
            int currentValue = queue.poll();
            order[visited] = currentValue;
            visited = visited + 1;
            for (int values: adjList.get(currentValue)) {
                linkedCounts[values] = linkedCounts[values] - 1;
                if (linkedCounts[values] == 0) {
                    queue.offer(values);
                }
            }
        }
        if (visited == linkedCounts.length) {
            return order;
        } else {
            return new int[0];
        }
    }
}
