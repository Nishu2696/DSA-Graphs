Question Link: https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/

class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        List<List<int[]>> graph = new ArrayList<>();

        for(int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge:edges) {
            graph.get(edge[0]).add(new int[] {edge[1], edge[2]});
            graph.get(edge[1]).add(new int[] {edge[0], edge[2]});
        }

        int minimum_number = n;
        int result = -1;

        for (int i = 0; i < n; i++) {
            int neighbours = get_number_neigbhours_based_threshold(graph, i, distanceThreshold);
            if (neighbours <= minimum_number) {
                minimum_number = neighbours;
                result = i;
            }
        }

        return result;
    }

    public int get_number_neigbhours_based_threshold(List<List<int[]>> graph, int source, int threshold) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.add(new int[] { source, 0 });
        Set<Integer> visited = new HashSet<>();

        while (!pq.isEmpty()) {
            int[] cell = pq.poll();
            int node = cell[0];
            int cost = cell[1];
            if (!visited.contains(node)) {
                visited.add(node);
                for (int[] vertex : graph.get(node)) {
                    int adjNode = vertex[0];
                    int adjCost = vertex[1];

                    if (cost + adjCost <= threshold) {
                        pq.add(new int[] { adjNode, cost + adjCost });
                    }
                }
            }
        }

        return visited.size() - 1;
    }
}
