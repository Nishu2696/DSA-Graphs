Question Link: https://leetcode.com/problems/01-matrix/

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new int[] {i, j});
                } else {
                    mat[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
        while(!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0];
            int y = cell[1];
            for(int[] dirs: directions) {
                int i = x + dirs[0];
                int j = y + dirs[1];

                if (i >= 0 && i < m && j >= 0 && j < n && mat[i][j] > mat[x][y] + 1) {
                    mat[i][j] = mat[x][y] + 1;
                    queue.offer(new int[] {i,j});
                }
            }
        }
        return mat;
    }
}
