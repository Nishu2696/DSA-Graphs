Question Link: https://leetcode.com/problems/cheapest-flights-within-k-stops/

class Solution {
    class Pair {
        int first;
        int second;
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    class Tuple {
        int first; // stops
        int second; // source
        int third; // cost
        Tuple(int first, int second, int third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }
    }
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        // adj = [[[1,100]], [[2,100], [3,600]], [[0,100], [3,200]], []]
        // stop = 0 -> 1 -> 2
        // cost = 0 -> 100 -> 200
        // dist = [0, 100, 200, 700]

        ArrayList<ArrayList<Pair>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < flights.length; i++) {
            graph.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2]));
        }

        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        Queue<Tuple> queue = new LinkedList<>();
        queue.add(new Tuple(0, src, 0));

        while(!queue.isEmpty()) {
            Tuple cell = queue.poll();

            int stops = cell.first;
            int source = cell.second;
            int cost = cell.third;

            if (stops > k) {
                continue;
            }

            for(Pair vertex: graph.get(source)) {
                int adjPair = vertex.first;
                int adjCost = vertex.second;

                if (cost + adjCost < dist[adjPair] && stops <= k) {
                    dist[adjPair] = cost + adjCost;
                    queue.add(new Tuple(stops + 1, adjPair, cost + adjCost));
                } 
            }
        }

        if (dist[dst] == Integer.MAX_VALUE) {
            return -1;
        }
        return dist[dst];
    }
}
