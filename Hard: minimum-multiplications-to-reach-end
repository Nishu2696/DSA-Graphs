Question Link: https://www.geeksforgeeks.org/problems/minimum-multiplications-to-reach-end/1

class Solution {
    class Pair {
        int first;
        int second;
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    int minimumMultiplications(int[] arr, int start, int end) {
        // Your code here
        
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(start, 0));
        
        int[] dist = new int[100000];
        for (int i = 0; i < 100000; i++) {
            dist[i] = (int)(1e9);
        }
        dist[start] = 0;
        int mod = 100000;
        
        int n = arr.length;
        
        while(!queue.isEmpty()) {
            Pair cell = queue.poll();
            int node = cell.first;
            int step = cell.second;
            
            for (int i = 0; i < n; i++) {
                int val = ( arr[i] * node ) % mod;
                if (step + 1 < dist[val]) {
                    dist[val] = step + 1;
                    queue.add(new Pair(val, step + 1));
                }
            }
        }
        
        return dist[end] == (int)(1e9) ? -1 : dist[end];
    }
}
