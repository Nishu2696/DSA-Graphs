Question Link: https://leetcode.com/problems/rotting-oranges/description/

class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] visited = grid;
        Queue<int[]> queue = new LinkedList<>();
        int countProperOranges = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j] == 2) {
                    queue.offer(new int[] {i, j});
                }
                if (visited[i][j] == 1) {
                    countProperOranges++;
                }
            }
        }
        if (countProperOranges == 0) {
            return 0;
        }
        if (queue.isEmpty()) {
            return -1;
        }

        int minutes = -1;
        int[][] dirs = {{1,0}, {-1,0}, {0, -1}, {0, 1}};
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                int[] cell = queue.poll();
                int i = cell[0];
                int j = cell[1];

                for (int[] dir: dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];

                    if (x >= 0 && y >= 0 && x < m && y < n && visited[x][y] == 1) {
                        visited[x][y] = 2;
                        countProperOranges--;
                        queue.offer(new int[] {x, y});
                    }
                }
                size = size - 1;
            }
            minutes = minutes + 1;
        }

        if (countProperOranges == 0) {
            return minutes;
        }
        return -1;
    }
}
