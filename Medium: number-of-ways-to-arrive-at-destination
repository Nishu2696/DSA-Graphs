Question Link: https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/

class Solution {
    class Pair {
        int next;
        long distance;
        Pair(int next, long distance) {
            this.next = next;
            this.distance = distance;
        }
    }
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<Pair>());
        }

        for (int[] edge: roads) {
            graph.get(edge[0]).add(new Pair(edge[1], edge[2]));
            graph.get(edge[1]).add(new Pair(edge[0], edge[2]));
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((Pair1, Pair2) -> Long.compare(Pair1.distance, Pair2.distance));
        pq.add(new Pair(0,0));

        long[] dist = new long[n];
        long[] ways = new long[n];
        long mod = (int)(1e9 + 7);

        Arrays.fill(dist, Long.MAX_VALUE);
        Arrays.fill(ways, 0);

        dist[0] = 0;
        ways[0] = 1;

        while(!pq.isEmpty()) {
            Pair cell = pq.poll();
            int node = cell.next;
            long nodeWeight = cell.distance;

            for(Pair vertex: graph.get(node)) {
                int neighborNode = vertex.next;
                long neighborNodeWeight = vertex.distance;

                if (nodeWeight + neighborNodeWeight < dist[neighborNode]) {
                    dist[neighborNode] = nodeWeight + neighborNodeWeight;
                    pq.add(new Pair(neighborNode, nodeWeight + neighborNodeWeight));
                    ways[neighborNode] = ways[node];
                } else if (nodeWeight + neighborNodeWeight == dist[neighborNode]) {
                    ways[neighborNode] = (ways[neighborNode] + ways[node]) % mod;
                }
            }
        }

        return (int)(ways[n-1] % mod);
    }
}
