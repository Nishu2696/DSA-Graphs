Question Link: https://leetcode.com/problems/making-a-large-island/

class Solution {
    public int[][] directions = {{ -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        List<Integer> map = new ArrayList<>();
        int id = 2;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int size = dfs(grid, i, j, id);
                    map.add(size);
                    id++;
                }
            }
        }

        if (map.size() == 0) {
            return 1;
        }

        int max = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    Set<Integer> seen = new HashSet<>();
                    int sum = 1;
                    for (int[] dirs: directions) {
                        int newI = i + dirs[0];
                        int newJ = j + dirs[1];

                        if (newI >= 0 && newI < n && newJ >= 0 && newJ < n && grid[newI][newJ] >= 2) {
                            int value = grid[newI][newJ];

                            if (!seen.contains(value)) {
                                sum = sum + map.get(value - 2);
                                seen.add(value);
                            }
                        } 
                    }

                    max = Math.max(max, sum);
                }
            }
        }

        return max == 0 ? n * n : max;
    }

    public int dfs(int[][] grid, int i, int j, int id) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid.length || grid[i][j] != 1) {
            return 0;
        }
        grid[i][j] = id;
        int count = 1;
        for (int[] dirs : directions) {
            int x = i + dirs[0];
            int y = j + dirs[1];
            count = count + dfs(grid, x, y, id);
        }

        return count;
    }
}
