DFS + BFS

Question Link: https://leetcode.com/problems/flood-fill/

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(image[sr][sc] == color) {
            return image;
        }
        // dfs(image, sr, sc, color, image[sr][sc], image.length, image[0].length);
        bfs(image, sr, sc, color, image[sr][sc], image.length, image[0].length);
        return image;
    }
    public void dfs(int[][] image, int row, int column, int newColor, int givenRowColColor, int m, int n) {
        if (row < 0 || row >= m || column < 0 || column >= n || image[row][column] != givenRowColColor) {
            return;
        }
        image[row][column] = newColor;
        dfs(image, row - 1, column, newColor, givenRowColColor, m, n);
        dfs(image, row + 1, column, newColor, givenRowColColor, m, n);
        dfs(image, row, column - 1, newColor, givenRowColColor, m, n);
        dfs(image, row, column + 1, newColor, givenRowColColor, m, n);

        return;
    }
    public void bfs(int[][] image, int row, int column, int newColor, int currentColor, int m, int n) {
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        Queue<int[]> queue = new LinkedList<>();
        // int currentColor = image[row][column];
        queue.add(new int[] {row, column});

        while (!queue.isEmpty()) {
            int queueSize = queue.size();
            for (int i = 0; i < queueSize; i++) {
                int[] p = queue.poll();
                image[p[0]][p[1]] = newColor;
                for (int j = 0; j < 4; j++) {
                    int x = p[0] + dx[j];
                    int y = p[1] + dy[j];

                    if (x < 0 || x >= m || y < 0 || y >= n || image[x][y] != currentColor) {
                        continue;
                    }
                    image[x][y] = newColor;
                    queue.add(new int[]{x,y});
                }
            }
        }
        return;
    }
}
