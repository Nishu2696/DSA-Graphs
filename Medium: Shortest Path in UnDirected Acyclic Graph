Question Links: https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] edge = new int[m][3];
            for (int i = 0; i < m; i++) {
                edge[i][0] = sc.nextInt();
                edge[i][1] = sc.nextInt();
                edge[i][2] = sc.nextInt();
            }
            Solution obj = new Solution();
            int res[] = obj.shortestPath(n, m, edge);
            for (int i = 0; i < n; i++) {
                System.out.print(res[i] + " ");
            }
            System.out.println();

            System.out.println("~");
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    
    class Pair {
    int first;
    int second;
    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Pair>> graph = new ArrayList<>();
        // graph creation with empty arrayList
        for(int i = 0; i < V; i++) {
            ArrayList<Pair> temp = new ArrayList<>();
            graph.add(temp);
        }
        
        // adding value to the graph
        // eg: edges = [[0,1,2], [0,2,1]]
        // graph.get(0).add(new Pair(1,2))
        // graph.get(0).add(new Pair(2,1))
        for(int i = 0; i < E; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            graph.get(u).add(new Pair(v, wt));
        }
        
        int[] visited = new int[V];
        Stack<Integer> stack = new Stack<>();
        
        for(int i = 0; i < V; i++) {
            if (visited[i] == 0) {
                dfsTopoSort(i, graph, visited, stack);
            }
        }
        
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        
        dist[0] = 0;
        
        while(!stack.isEmpty()) {
            int node = stack.pop();
            if(dist[node]!=Integer.MAX_VALUE){
                for (int i = 0; i < graph.get(node).size(); i++) {
                int first = graph.get(node).get(i).first;
                int second = graph.get(node).get(i).second;
                
                if (dist[node] + second < dist[first]) {
                    dist[first] = dist[node] + second;
                }
            }
            }
        }
        
        for (int i = 0; i < V; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                dist[i] = -1;
            }
        }
        
        return dist;
        
    }
    
    public void dfsTopoSort(int index, ArrayList<ArrayList<Pair>> graph, int[] visited, Stack<Integer> stack) {
        visited[index] = 1;
        for (int i = 0; i < graph.get(index).size(); i++) {
            int first = graph.get(index).get(i).first;
            if (visited[first] == 0) {
                dfsTopoSort(first, graph, visited, stack);
            }
        }
        stack.add(index);
    }
}
