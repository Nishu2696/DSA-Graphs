Question Link: https://leetcode.com/problems/word-ladder/description/

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)) {
            return 0;
        }
        Set<String> dict = new HashSet<>();
        dict.addAll(wordList);

        Set<String> set1 = new HashSet<>();
        Set<String> set2 = new HashSet<>();

        Set<String> visited = new HashSet<>();

        set1.add(beginWord);
        set2.add(endWord);

        return helper(dict, set1, set2, visited, 1);
    }

    public int helper(Set<String> dict, Set<String> set1, Set<String> set2, Set<String> visited, int level) {
        if(set1.isEmpty()) {
            return 0;
        }
        if (set1.size() > set2.size()) {
            return helper(dict, set2, set1, visited, level);
        }

        visited.addAll(set1);
        visited.addAll(set2);

        Set<String> set = new HashSet<>();

        for (String str: set1) {
            for (int i = 0; i < str.length(); i++) {
                char[] chars = str.toCharArray();
                // Replacing each index value from a to z
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    chars[i] = ch;
                    String word = new String(chars);
                    // If the new replaced string is in set2, we have found a intersection
                    if (set2.contains(word)) {
                        return level + 1;
                    }

                    if (!visited.contains(word) && dict.contains(word)) {
                        set.add(word);
                        visited.add(word);
                    }
                }
            }
        }

        return helper(dict, set2, set, visited, level + 1);
    }
}
