Question Link: https://leetcode.com/problems/path-with-minimum-effort/

class Solution {
    public int minimumEffortPath(int[][] heights) {
        // Dijkstra Solution
        int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
        int m = heights.length;
        int n = heights[0].length;
        int[][] dist = new int[m][n];
        for(int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;

        // pq = {0,0,0} -> (0,0) and distance from previous index
        // a[2] - b[2] this is based on distance from previous index
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[2] - b[2]);
        pq.add(new int[] {0,0,0});

        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int i = cell[0];
            int j = cell[1];
            int weight = cell[2];

            if (i == m - 1 && j == n - 1) {
                break;
            }

            for(int[] dirs: directions) {
                int x = i + dirs[0];
                int y = j + dirs[1];

                if (x < 0 || x >= m || y < 0 || y >= n) {
                    continue;
                }

                int dummyDist = Math.max(weight, Math.abs(heights[i][j] - heights[x][y]));
                if (dummyDist < dist[x][y]) {
                    pq.add(new int[] {x, y, dummyDist});
                    dist[x][y] = dummyDist;
                }
            }
        }

        return dist[m-1][n-1];
    }
}
