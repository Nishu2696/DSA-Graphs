Question Link: https://leetcode.com/problems/surrounded-regions/

class Solution {
    // DFS Solution
    // public void solve(char[][] board) {
    // if (board.length == 0 || board[0].length == 0) {
    // return;
    // }
    // // because all will be cell will be treated as edges
    // if (board.length == 2 || board[0].length == 2) {
    // return;
    // }
    // int m = board.length;
    // int n = board[0].length;

    // for (int i = 0; i < m; i++) {
    // if (board[i][0] == 'O') {
    // helper(board, i , 0);
    // }
    // if (board[i][n-1] == 'O') {
    // helper(board, i , n - 1);
    // }
    // }

    // for (int j = 1; j < n - 1; j++) {
    // if (board[0][j] == 'O') {
    // helper(board, 0 , j);
    // }
    // if (board[m - 1][j] == 'O') {
    // helper(board, m - 1 , j);
    // }
    // }

    // for (int i = 0; i < m; i++) {
    // for (int j = 0; j < n; j++) {
    // if (board[i][j] == 'O') {
    // board[i][j] = 'X';
    // }
    // if (board[i][j] == '*') {
    // board[i][j] = 'O';
    // }
    // }
    // }
    // }
    // public void helper(char[][] board, int i, int j) {
    // if (i < 0 || j < 0 || i > board.length - 1 || j > board[0].length - 1 ||
    // board[i][j] != 'O') {
    // return;
    // }
    // board[i][j] = '*';//setting it with different, so that later it can be
    // replaced with O
    // helper(board, i + 1, j);
    // helper(board, i - 1, j);
    // helper(board, i, j - 1);
    // helper(board, i, j + 1);
    // }

    // BFS Solution

    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) {
            return;
        }
        if (board.length == 2 || board[0].length == 2) {
            return;
        }

        int m = board.length;
        int n = board[0].length;

        Queue<int[]> queue = new LinkedList<>();

        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') {
                board[i][0] = '*';
                queue.offer(new int[] { i, 0 });
            }
            if (board[i][n - 1] == 'O') {
                board[i][n - 1] = '*';
                queue.offer(new int[] { i, n - 1 });
            }
        }

        for (int j = 1; j < n - 1; j++) {
            if (board[0][j] == 'O') {
                board[0][j] = '*';
                queue.offer(new int[] { 0, j });
            }
            if (board[m - 1][j] == 'O') {
                board[m - 1][j] = '*';
                queue.offer(new int[] { m - 1, j });
            }
        }

        bfs(queue, board, m, n);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if (board[i][j] == '*') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    public void bfs(Queue<int[]> queue, char[][] board, int m, int n) {
        int[][] directions = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0];
            int y = cell[1];
            for (int[] dirs : directions) {
                int i = x + dirs[0];
                int j = y + dirs[1];

                if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] != 'O') {
                    continue;
                }
                queue.offer(new int[] { i, j });
                board[i][j] = '*';
            }
        }
    }
}
