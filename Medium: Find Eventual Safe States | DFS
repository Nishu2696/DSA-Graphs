Question Link: https://leetcode.com/problems/find-eventual-safe-states/

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        // visited = [true, true, true, true, true, true, true]
        // dummy = [true, true, false, true, false, false, false]
        // i = 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6
        // src = 0 -> [1,2] -> return false
        // src = 1 -> [2,3] -> return true
        // src = 2 -> [5] -> return false
        // src = 5 -> [] -> return false
        // src = 3 -> [0] -> return true
        // src = 2
        // src = 4 -> [5] -> return false
        // src = 6 -> [] -> return false

        List<List<Integer>> adjList = new ArrayList<>();
        int n = graph.length;
        for (int i = 0; i < n; i++) {
            List<Integer> result = new ArrayList<>();
            for (int j = 0; j < graph[i].length; j++) {
                result.add(graph[i][j]);
            }
            adjList.add(result);
        }

        boolean[] visited = new boolean[n];
        boolean[] dummy = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(adjList, visited, dummy, i);
            }
        }

        List<Integer> answer = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (!dummy[i]) {
                answer.add(i);
            }
        }

        return answer;
    }

    public boolean dfs(List<List<Integer>> adjList, boolean[] visited, boolean[] dummy, int src) {
        visited[src] = true;
        dummy[src] = true;

        for (int vertex : adjList.get(src)) {
            if (!visited[vertex] && dfs(adjList, visited, dummy, vertex)) {
                return true;
            } else if (dummy[vertex]) {
                return true;
            }
        }
        dummy[src] = false;
        return false;
    }
}
