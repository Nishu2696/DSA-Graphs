DFS + BFS

Question Link: https://leetcode.com/problems/number-of-provinces/

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                // dfs(isConnected, visited, i);
                bfs(isConnected, visited, i);
                ans = ans + 1;
            }
        }
        return ans;
    }

    public void dfs(int[][] isConnected, boolean[] visited, int currentIndex) {
        if (visited[currentIndex]) {
            return;
        }
        visited[currentIndex] = true;
        int[] neighbors = isConnected[currentIndex];
        int n = neighbors.length;
        for (int i = 0; i < n; i++) {
            if (neighbors[i] == 1) {
                dfs(isConnected, visited, i);
            }
        }
        return;
    }

    public void bfs(int[][] isConnected, boolean[] visited, int currentIndex) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(currentIndex);
        while (!queue.isEmpty()) {
            int value = queue.poll();
            if (visited[value]) {
                continue;
            }
            visited[value] = true;
            int[] neighbors = isConnected[value];
            int n = neighbors.length;
            for (int i = 0; i < n; i++) {
                if (neighbors[i] == 1) {
                    queue.add(i);
                }
            }
        }
        return;
    }
}
